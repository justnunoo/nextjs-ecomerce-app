generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  productId       Int      @id @default(autoincrement())
  name            String
  price           Float
  availableColors String
  availableSizes  String
  brand           String
  category        String?
  mainImage       String
  subImages       String?
  discount        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  cartItems  CartItem[] // Relation to CartItem
  orderItems OrderItem[] // Relation to OrderItem
  Favorites  Favorites[]

  @@map("products")
}

model CartItem {
  id            Int     @id @default(autoincrement())
  cart          Cart    @relation(fields: [cartId], references: [id]) // Foreign key to Cart
  cartId        Int // Foreign key
  product       Product @relation(fields: [productId], references: [productId]) // Foreign key to Product
  productId     Int // Foreign key
  selectedSize  String
  selectedColor String
  quantity      Int     @default(1)
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique // One-to-one relationship between Cart and User
  user      User       @relation(fields: [userId], references: [id]) // Foreign key to User
  items     CartItem[] // One-to-many relation with CartItem
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  username  String      @unique
  password  String
  cart      Cart? // One-to-one relation with Cart (managed by Cart model)
  orders    Order[] // One-to-many relation with Order
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Favorites Favorites[]
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id]) // Foreign key to User
  userId      Int // Foreign key
  status      String // Status of the order (e.g., "PENDING", "SHIPPED", "DELIVERED", "CANCELED")
  orderItems  OrderItem[] // One-to-many relation with OrderItem
  totalAmount Float // Total amount for the order
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id            Int      @id @default(autoincrement())
  order         Order    @relation(fields: [orderId], references: [id]) // Foreign key to Order
  orderId       Int // Foreign key
  product       Product  @relation(fields: [productId], references: [productId]) // Foreign key to Product
  productId     Int // Foreign key
  quantity      Int      @default(1) // Number of units for this product in the order
  selectedColor String // Chosen color for the product
  selectedSize  String // Chosen size for the product
  priceAtTime   Float // Price of the product at the time of order
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Favorites {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [productId])

  @@unique([userId, productId]) // Composite unique constraint
}
